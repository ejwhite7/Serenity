//
//  Course.swift
//  Serenity
//
//  Created by Edward White on 7/24/20.
//

import FirebaseFirestore
import Foundation

struct Course {
    var documentID: String
    var title: String
    var subheading: String
    var description: String
    var sclink: String
}

// MARK: - Firestore interoperability

extension Course: Codable {

  /// Initializes a restaurant with a documentID auto-generated by Firestore.
  init(title: String,
       subheading: String,
       description: String,
       sclink: String) {
    let document = Firestore.firestore().collection("courses").document()
    self.init(documentID: document.documentID,
              title: title,
              subheading: subheading,
              description: description,
              sclink: sclink)
  }

  /// Initializes a restaurant from a documentID and some data, ostensibly from Firestore.
  private init?(documentID: String, dictionary: [String: Any]) {
    guard let title = dictionary["title"] as? String,
        let subheading = dictionary["subheading"] as? String,
        let description = dictionary["description"] as? String,
        let sclink = dictionary["link"] as? String else { return nil }

    self.init(documentID: documentID,
              title: title,
              subheading: subheading,
              description: description,
              sclink: sclink)
  }

  init?(document: QueryDocumentSnapshot) {
    self.init(documentID: document.documentID, dictionary: document.data())
  }

  init?(document: DocumentSnapshot) {
    guard let data = document.data() else { return nil }
    self.init(documentID: document.documentID, dictionary: data)
  }

}

class CourseManager {
    
    static let main = CourseManager()
    
    private init() {}
    
    var courseListener: ListenerRegistration?
    var allCourses: [Course] = []
    
    func getAllCourses(completion: @escaping ([Course]) -> ()) {
    
        //Firebase code for accessing database
        let db = Firestore.firestore().collection("courses")
        courseListener = db.addSnapshotListener{ [self] (snapshot, error) in
            if let error = error {
                print("Error getting documents: \(error.localizedDescription)")
                return
            }
            guard let snapshot = snapshot else {
                return
            }
            let allDocuments = snapshot.documents
            for courseDocument in allDocuments {
                if let newCourse = Course(document: courseDocument){
                    //Fill array with course data
                    allCourses.append(newCourse)
                }
            }
            completion(allCourses)
        }
    }
    
    func stopGettingAllCourses() {
        courseListener?.remove()
        courseListener = nil
    }
}
